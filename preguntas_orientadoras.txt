Preguntas orientadoras

1. Describa brevemente los diferentes perfiles de familias de microprocesadores/microcontroladores de ARM. Explique alguna de sus diferencias características.

    1 - Los procesadores ARM Cortex se dividen en 3 grupos:

        * Cortex A: Este grupo consiste en procesadores de alto rendimiento para uso de aplicaciones, como lo puede ser un Sistema Operativo. Su principal característica es que posee una Unidad de Manejo de Memoria (MMU), necesaria para correr Sistemas Operativos.

        * Cortex R: Este grupo consiste en procesadores optimizados para el uso de Sistemas Operativos de Tiempo Real. Sus principales características consisten en añadidos para asegurar la operación de aplicaciones críticas y de tiempo real, como lo son: TCM, MPU y instrucciones de división a nivel de hardware.

        * Cortex M: Este grupo consiste en procesadores de alto rendimiento diseñados para microcontroladores, FPGAs, SoCs y ASICs. Sus principales características son la optimización para bajo consumo, eficiencia energética, interrupciones de baja latencia, facilidad de uso, y en algunos procesadores del grupo poseen instrucciones DSP. 

Cortex M

1. Describa brevemente las diferencias entre las familias de procesadores Cortex M0, M3 y M4.

    1 - 
        * Cortex-M0: En este grupo de procesadores se encuentran los procesadores Cortex-M0 y M0+, los cuales están basados en la arquitectura ARMv6-M y en la arquitectura de memoria Von Neumann. Son ideales para desarrollos de bajo costo. El Cortex-M0+ destaca por sus optimizaciones para operar en modo de bajo consumo.

        * Cortex-M3: El procesador Cortex-M3 está basado en la arquitectura ARMV7-M y en la arquitectura de memoria Hardvard. A diferencia de los Cortex-M0 y Cortex-M0+, posee un Systick Timer y una ISA Thumb o Thumb-2. Este procesador está diseñado para desarrollos de alto rendimiento.

        * Cortex-M4: Al igual que el procesador Cortex-M3, está basado en la arquitectura de memoria Harvard, pero posee la arquitectura ARMV7E-M, la cual es una versión mejorada de la arquitectura ARMV7-M. Este procesador también está diseñado para desarrollos de alto rendimiento, sin embargo, posee la capacidad de realizar operaciones de punto flotante en hardware y capaz de procesar señales gracias a su extensión DSP. 

2. ¿Por qué se dice que el set de instrucciones Thumb permite mayor densidad de código? Explique

    2 - Porque Thumb es un set de instrucciones de 16 bits, lo que genera un código de menor tamaño en comparación al código que se genera con un set de instrucciones de 32 bits.

3. ¿Qué entiende por arquitectura load-store? ¿Qué tipo de instrucciones no posee este tipo de arquitectura?

    3 - La arquitectura load-store se refiere a la arquitectura en la cual para operar sobre los datos primero se deben cargar de la memoria a un registro, ser procesados y luego ser escritos nuevamente en la memoria desde el registro usando distintas instrucciones.

    Este tipo de arquitectura no posee instrucciones que operen directamente sobre los datos en memoria.

4. ¿Cómo es el mapa de memoria de la familia?

    4 - La memoria de 4GB está particionada en diferentes regiones, las cuales son:

        - Región CODE.
        - Región SRAM.
        - Región de periféricos.
        - Bus privado para periféricos.

        Sin embargo, la aquitectura de la memoria permite que se usen distintas regiones de memoria para otros propósitos.
        

5. ¿Qué ventajas presenta el uso de los “shadowed pointers” del PSP y el MSP?

    5 - En sistemas operativos embebidos o RTOS los handlers de excepciones usan el MSP y las tareas usan el PSP.  Esto trae ventajas como la facilidad de crear sistemas operativos eficientes; en caso de corrupción del stack de una tarea, el stack del kernel del OS queda intacto; y permite el uso de la MPU para definir el stack a usar por una tarea. 

6. Describa los diferentes modos de privilegio y operación del Cortex M, sus relaciones y como se conmuta de uno al otro. Describa un ejemplo en el que se pasa del modo privilegiado a no privilegiado y nuevamente a privilegiado.

    6 - 
        * Modos de privilegio:

            - Modo de acceso privilegiado: con este nivel de acceso se puede acceder a todos los recursos del procesador.

            - Modo de acceso no privilegiado: en este nivel de acceso hay regiones de memoria que son inaccesibles y algunas operaciones no se puede usar.

        * Modos de operación:

            - Modo Handler: En este modo se ejecutan los handlers de las excepciones, como lo puede ser la Rutina de Servicio de Interrupción.

            - Modo Thread: En este modo se ejecuta el código de aplicación normal, esto puede ser tanto en modo de acceso privilegiado coo no privilegiado

        El bit 0 del registro CONTROL (nPRIV) define si el procesador se encuentra en modo privilegiado (bit en 0) o no privilegiado (bit en 1).

        Al estar en modo privilegiado se puede pasar a modo no privilegiado al cambiar el bit nPRIV a 1. Sin embargo, una vez en modo privilegiado el bit no se puede escribir, solo leer. En este caso, para pasar de modo no privilegiado a privilegiado hay que lanzar una excepción que cambie de modo Thread a modo Handler y desde allí limpiar el bit nPRIV para así volver a modo Thread con acceso privilegiado.

7. ¿Qué se entiende por modelo de registros ortogonal? Dé un ejemplo

    7 - Se entiende por un modelo donde los registros son de propósito general, esto quiere decir que las instrucciones pueden tomar cualquier registro independientemente de la instrucción.

8. ¿Qué ventajas presenta el uso de instrucciones de ejecución condicional (IT)? Dé un ejemplo

    8 - El uso de instrucciones de ejecución condicional hace que el procesador no tenga que saltar a otra parte del programa, como lo haría con instrucciones con saltos incondicionales como un if, por lo que el pipeline de ejecución se preserva.

9. Describa brevemente las excepciones más prioritarias (reset, NMI, Hardfault).

    9 - 

        * Reset: Es la excepción que se ejecuta cuando se reinicia el procesador.

        * NMI: Esta interrupción no puede ser deshabilitada, y se dispara cuando ocurre un error en otro handler de excepción.

        * Hardfault: Esta excepción es para todo tipo de fallas, se dispara cuando el handler correspondiente a la falla no puede ser activado porque fue previamente deshabilitado.

10. Describa las funciones principales de la pila. ¿Cómo resuelve la arquitectura el llamado a funciones y su retorno?

    10 - Cuando una función o subrutina es llamada, la dirección de retorno es guardada automáticamente en el registro Link Register (LR), de esta manera, al finaliza la función, el valor de LR es cargado en el Program Counter (PC), retornando así a la dirección donde se había llamado la función.

11. Describa la secuencia de reset del microprocesador.

    11 - Luego de la señal de reset y antes que el procesador inicie la ejecución del programa, el procesador lee las dos primeras palabras en memoria (dirección 0x00000000), las cuales contienen el valor inicial del Main Stack Pointer (MSP) y el vector de reset. Luego de que las dos palabras hayan sido leídas por el procesador, el procesador escribe en el MSP y el PC los valores leídos.

12. ¿Qué entiende por “core peripherals”? ¿Qué diferencia existe entre estos y el resto de los periféricos?

    12 - Los core peripherals son periféricos específicos de los procesadores. La diferencia es que se encuentran embebidos dentro del procesador, en cambio el resto de periféricos se encuentran fuera del procesador y por lo general son agregador por el fabricante del microcontrolador.

13. ¿Cómo se implementan las prioridades de las interrupciones? Dé un ejemplo

    13 - Las mayoría de las interrupciones son configurables. Los niveles de prioridad van desde el número más bajo hasta el número más alto, siendo el número más bajo el de mayor prioridad. Por ejemplo, las prioridades de Reset, NMI, y Hard Fault tienen la prioridad -3, -2 y -1 respectivamente, indicando que son las de mayor prioridad y que no son configurables, en cambio, las excepciones MemManage Fault, Bus Fault, etc, tienen prioridades programables, las cuales se pueden configurar con números desde el 0 en adelante.

14. ¿Qué es el CMSIS? ¿Qué función cumple? ¿Quién lo provee? ¿Qué ventajas aporta?

    14 - El CMSIS es una capa de abstracción independiente del fabricante que provee una interfaz hacia el procesador, los periféricos, sistemas operativos de tiempo de real y componentes del middleware. 

    El CMSIS lo provee ARM, y aporta la ventaja de ser una API estándar sin importar el fabricante del microcontrolador, lo que reduce considerablemente la curva de aprendizaje.


15. Cuando ocurre una interrupción, asumiendo que está habilitada ¿Cómo opera el microprocesador para atender a la subrutina correspondiente? Explique con un ejemplo

    15 - En principio se realiza la secuencia de entrada a la interrupción, en donde automáticamente se hace un push de un cierto número de registros al stack, esto es conocido como Stacking. Mientras tanto, la dirección de inicio de la interrupción es buscada en la tabla de vectores. Una vez que el servicio de interrupción es completado, el procesador lleva a cabo un retorno de excepción. Los registros que fueron llevados al stack son restaurados y el programa interrumpido es resumido.

16. ¿Cómo cambia la operación de stacking al utilizar la unidad de punto flotante?

    16 - Al utilizar la unidad de punto flotante la operación de stacking pasa a ser "lazy stacking", lo que hace que el mecanismo de stacking reserve el espacio del stack para los registros de la unidad de punto flotante, pero no les hará un push al stack hasta que realmente los necesite.

17. Explique las características avanzadas de atención a interrupciones: tail chaining y late arrival.

    17 - 
        * Tail chaining: Es una optimización que consiste en que cuando el procesador está ejecutando una excepción y recibe otra de igual o mayor prioridad, esta nueva excepción pasa a estado pendiente y se empieza a ejecutar una vez que haya terminado la ejecución de la excepción actual en vez de restaurar los registros desde el stack.

        * Late arrival: Es una optimización que consiste en detener la operación de stacking para atender una excepción de mayor prioridad en caso de que la excepción suceda durante el transcurso de la operación.

18. ¿Qué es el systick? ¿Por qué puede afirmarse que su implementación favorece la portabilidad de los sistemas operativos embebidos?

    18 - El Systick es un periférico que se encuentra dentro de los procesadores Cortex-M3 y M4. Posee la función de ser un timer regular que es usado para las interrupciones de un Sistema Operativo. Al estar dentro de los procesadores, se puede asumir que siempre está presente, favoreciendo así a la portabilidad entre sistemas operativos embebidos.

19. ¿Qué funciones cumple la unidad de protección de memoria (MPU)?

    19 - La MPU cumple la función de definir los accesos a varias regiones de memoria.

20. ¿Cuántas regiones pueden configurarse como máximo? ¿Qué ocurre en caso de haber solapamientos de las regiones? ¿Qué ocurre con las zonas de memoria no cubiertas por las regiones definidas?

    20 - En los procesadores Cortex-M3 y Cortex-M4 se pueden configurar hasta un máximo de ocho regiones.

21. ¿Para qué se suele utilizar la excepción PendSV? ¿Cómo se relaciona su uso con el resto de las excepciones? Dé un ejemplo

    21 - Se utiliza para hacer un cambio de contexto. Esta excepción tiene un nivel de prioridad programable, por lo que al programarla con un nivel de prioridad bajo podemos asegurar que se va a ejecutar luego de que todas las interrupciones de más alta prioridad hayan sido ejecutadas.

22. ¿Para qué se suele utilizar la excepción SVC? Expliquelo dentro de un marco de un sistema operativo embebido.

    22 - Se utiliiza para cambiar de modo Thread a modo Handler. Cuando un OS inicia en Thread mode, puede usar la excepción SVC para entrar en modo Handler, para así crear el stack de una tarea y devolver el PSP.


ISA

1. ¿Qué son los sufijos y para qué se los utiliza? Dé un ejemplo

    1 - Lo sufijos son letras que se agregan al final de una instrucción con el fin de realizar o una ejecución condicional o actualizar un flag de estado. Por ejemplo, el sufijo EQ hace que la instrucción se ejecute solo si el flag Z es igual a 1.

2. ¿Para qué se utiliza el sufijo ‘s’? Dé un ejemplo

    2 - El sufijo 's' se utiliza para actualizar los flags asociados a la operación. Por ejemplo, la instrucción adds realizar la suma y luego actualiza las flags de los resultados de las operaciones aritméticas lógicas.

3. ¿Qué utilidad tiene la implementación de instrucciones de aritmética saturada? Dé un ejemplo con operaciones con datos de 8 bits.

4. Describa brevemente la interfaz entre assembler y C ¿Cómo se reciben los argumentos de las funciones? ¿Cómo se devuelve el resultado? ¿Qué registros deben guardarse en la pila antes de ser modificados?

    4 - La interfaz entre assembler y C se realiza mediante el uso de los registros r0, r1, r2, r3, independientemente de la cantidad de parámetros que tenga la función en C. El resultado de la función se devuelve en el registro r0.

5. ¿Qué es una instrucción SIMD? ¿En qué se aplican y que ventajas reporta su uso? Dé un ejemplo.